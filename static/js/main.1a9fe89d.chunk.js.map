{"version":3,"sources":["Main.js","App.js","reportWebVitals.js","index.js"],"names":["Main","areaName","Array","useState","city","setCity","key","corona","undefined","countryName","push","data","setData","useEffect","totalCase","parseInt","replaceAll","newCase","recovered","death","name","className","newCcase","newFcase","onChange","e","console","log","target","value","map","tit","en","kr","percentage","ResponsiveContainer","width","height","BarChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Bar","stackId","fill","App","class","to","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1a9fe89d.chunk.js","sourcesContent":["import corona from './corona.json';\r\nimport { useState, useEffect } from 'react';\r\nimport { BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\n\r\nfunction Main() {\r\n\r\n  let areaName = new Array();\r\n  let [city, setCity] = useState('korea');\r\n\r\n  for (let key in corona) {\r\n    if (corona[key].countryName !== undefined) {\r\n      areaName.push({\r\n        \"kr\": corona[key].countryName,\r\n        \"en\": key\r\n      })\r\n    }\r\n  }\r\n\r\n  let areaChange = (e) => {\r\n    console.log(e.target.value);\r\n    setCity(e.target.value);\r\n  }\r\n\r\n  const [data, setData] = useState();\r\n\r\n  useEffect(() => {\r\n\r\n    let totalCase = parseInt(corona[city].totalCase.replaceAll(',', '')),\r\n      newCase = parseInt(corona[city].newCase),\r\n      recovered = parseInt(corona[city].recovered.replaceAll(',', '')),\r\n      death = parseInt(corona[city].death.replaceAll(',', '')),\r\n      care = totalCase - (recovered + death);\r\n\r\n    setData([\r\n      {\r\n        name: '확진자',\r\n        '인원': totalCase,\r\n        '추가': newCase\r\n      },\r\n      {\r\n        name: '검사중',\r\n        '인원': care\r\n      },\r\n      {\r\n        name: '격리해제',\r\n        '인원': recovered\r\n      },\r\n      {\r\n        name: '사망자',\r\n        '인원': death\r\n      }\r\n\r\n    ])\r\n  }, [city]); //useEfferct end , [] = 딱 한번만 실행, 값 넣어주면 재실행\r\n\r\n\r\n  return (\r\n    <>\r\n      <main>\r\n        <article className=\"kor\">\r\n          <h2>국내현황</h2><p>2021.10.06. 00:00 집계기준</p>\r\n          <div>\r\n            <span>확진환자({corona['korea'].totalCase})</span>\r\n            <span>격리해제({corona['korea'].recovered})</span>\r\n            <span>사망자({corona['korea'].death})</span>\r\n          </div>\r\n          <div>\r\n            <span>일일확진자({corona['korea'].newCase})</span>\r\n            <span>국내발생({corona['korea'].newCcase})</span>\r\n            <span>해외유입({corona['korea'].newFcase})</span>\r\n          </div>\r\n        </article>\r\n\r\n        <article className=\"area\">\r\n          <h2>지역현황</h2>\r\n          <div>\r\n            <select onChange={areaChange}>\r\n              {\r\n                areaName.map(tit => {\r\n                  return (<option key={tit.en} value={tit.en}>\r\n                    {tit.kr}\r\n                  </option>);\r\n                })\r\n              }\r\n            </select>\r\n            <p>※ 원하시는 지역을 선택해주세요.</p>\r\n\r\n            <table>\r\n              <caption>{corona[city].countryName}</caption>\r\n              <thead>\r\n                <tr>\r\n                  <th>확진자</th><th>완치자</th><th>사망자</th><th>발생률</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr>\r\n                  <td>\r\n                    {corona[city].totalCase}명\r\n                    (+{corona[city].newCase})\r\n                  </td>\r\n                  <td>{corona[city].recovered}명</td>\r\n                  <td>{corona[city].death}</td>\r\n                  <td>{corona[city].percentage}%</td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </article>\r\n\r\n        <div className=\"App\">\r\n          {/* <button onClick={change}>차트변경</button> */}\r\n\r\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n            <BarChart\r\n              width={500}\r\n              height={300}\r\n              data={data}\r\n              margin={{\r\n                top: 20,\r\n                right: 30,\r\n                left: 20,\r\n                bottom: 5,\r\n              }}\r\n            >\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis dataKey=\"name\" />\r\n              <YAxis />\r\n              <Tooltip />\r\n              <Legend />\r\n              <Bar dataKey=\"인원\" stackId=\"a\" fill=\"#82ca9d\" />\r\n              <Bar dataKey=\"추가\" stackId=\"a\" fill=\"#8884d8\" />\r\n            </BarChart>\r\n          </ResponsiveContainer>\r\n        </div>\r\n\r\n      </main>\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import './App.css';\r\nimport Main from './Main';\r\nimport {BrowserRouter, Route, Switch, Link} from 'react-router-dom';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n      <BrowserRouter>\r\n        <header class=\"header\">\r\n          코로나바이러스감염증-19(국내통계)\r\n          <nav>\r\n            <a><Link to=\"/\">HOME</Link></a>\r\n            <a><Link to=\"/about\">About</Link></a>\r\n            <a><Link to=\"/work\">Work</Link></a>\r\n            <a><Link to=\"/contact\">Contact</Link></a>\r\n          </nav>\r\n        </header>\r\n\r\n        <Switch>\r\n          <Route exact path='/' component={Main} />\r\n          <Route path='/about'>\r\n            <div>프로필</div>\r\n            <p>안녕하세요</p>\r\n          </Route>\r\n          <Route path='/work'>\r\n            <div>포트폴리오</div>\r\n            <p>제작중</p>\r\n          </Route>\r\n          <Route path='/contact'>\r\n            <div>이메일</div>\r\n          </Route>\r\n        </Switch>\r\n      </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}